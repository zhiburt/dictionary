// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dictionary.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddNewWordRequest struct {
	Word                 *Word    `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddNewWordRequest) Reset()         { *m = AddNewWordRequest{} }
func (m *AddNewWordRequest) String() string { return proto.CompactTextString(m) }
func (*AddNewWordRequest) ProtoMessage()    {}
func (*AddNewWordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c04a5ffd1d26433d, []int{0}
}

func (m *AddNewWordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNewWordRequest.Unmarshal(m, b)
}
func (m *AddNewWordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNewWordRequest.Marshal(b, m, deterministic)
}
func (m *AddNewWordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNewWordRequest.Merge(m, src)
}
func (m *AddNewWordRequest) XXX_Size() int {
	return xxx_messageInfo_AddNewWordRequest.Size(m)
}
func (m *AddNewWordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNewWordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddNewWordRequest proto.InternalMessageInfo

func (m *AddNewWordRequest) GetWord() *Word {
	if m != nil {
		return m.Word
	}
	return nil
}

type AddNewWordResponce struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddNewWordResponce) Reset()         { *m = AddNewWordResponce{} }
func (m *AddNewWordResponce) String() string { return proto.CompactTextString(m) }
func (*AddNewWordResponce) ProtoMessage()    {}
func (*AddNewWordResponce) Descriptor() ([]byte, []int) {
	return fileDescriptor_c04a5ffd1d26433d, []int{1}
}

func (m *AddNewWordResponce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNewWordResponce.Unmarshal(m, b)
}
func (m *AddNewWordResponce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNewWordResponce.Marshal(b, m, deterministic)
}
func (m *AddNewWordResponce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNewWordResponce.Merge(m, src)
}
func (m *AddNewWordResponce) XXX_Size() int {
	return xxx_messageInfo_AddNewWordResponce.Size(m)
}
func (m *AddNewWordResponce) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNewWordResponce.DiscardUnknown(m)
}

var xxx_messageInfo_AddNewWordResponce proto.InternalMessageInfo

func (m *AddNewWordResponce) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetByIDRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByIDRequest) Reset()         { *m = GetByIDRequest{} }
func (m *GetByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetByIDRequest) ProtoMessage()    {}
func (*GetByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c04a5ffd1d26433d, []int{2}
}

func (m *GetByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetByIDRequest.Unmarshal(m, b)
}
func (m *GetByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetByIDRequest.Marshal(b, m, deterministic)
}
func (m *GetByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByIDRequest.Merge(m, src)
}
func (m *GetByIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetByIDRequest.Size(m)
}
func (m *GetByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByIDRequest proto.InternalMessageInfo

func (m *GetByIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetByIDResponce struct {
	Word                 *Word    `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByIDResponce) Reset()         { *m = GetByIDResponce{} }
func (m *GetByIDResponce) String() string { return proto.CompactTextString(m) }
func (*GetByIDResponce) ProtoMessage()    {}
func (*GetByIDResponce) Descriptor() ([]byte, []int) {
	return fileDescriptor_c04a5ffd1d26433d, []int{3}
}

func (m *GetByIDResponce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetByIDResponce.Unmarshal(m, b)
}
func (m *GetByIDResponce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetByIDResponce.Marshal(b, m, deterministic)
}
func (m *GetByIDResponce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByIDResponce.Merge(m, src)
}
func (m *GetByIDResponce) XXX_Size() int {
	return xxx_messageInfo_GetByIDResponce.Size(m)
}
func (m *GetByIDResponce) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByIDResponce.DiscardUnknown(m)
}

var xxx_messageInfo_GetByIDResponce proto.InternalMessageInfo

func (m *GetByIDResponce) GetWord() *Word {
	if m != nil {
		return m.Word
	}
	return nil
}

type Word struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	Examples             []string `protobuf:"bytes,2,rep,name=examples,proto3" json:"examples,omitempty"`
	Transcription        string   `protobuf:"bytes,3,opt,name=Transcription,proto3" json:"Transcription,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Word) Reset()         { *m = Word{} }
func (m *Word) String() string { return proto.CompactTextString(m) }
func (*Word) ProtoMessage()    {}
func (*Word) Descriptor() ([]byte, []int) {
	return fileDescriptor_c04a5ffd1d26433d, []int{4}
}

func (m *Word) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Word.Unmarshal(m, b)
}
func (m *Word) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Word.Marshal(b, m, deterministic)
}
func (m *Word) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Word.Merge(m, src)
}
func (m *Word) XXX_Size() int {
	return xxx_messageInfo_Word.Size(m)
}
func (m *Word) XXX_DiscardUnknown() {
	xxx_messageInfo_Word.DiscardUnknown(m)
}

var xxx_messageInfo_Word proto.InternalMessageInfo

func (m *Word) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *Word) GetExamples() []string {
	if m != nil {
		return m.Examples
	}
	return nil
}

func (m *Word) GetTranscription() string {
	if m != nil {
		return m.Transcription
	}
	return ""
}

func init() {
	proto.RegisterType((*AddNewWordRequest)(nil), "pb.AddNewWordRequest")
	proto.RegisterType((*AddNewWordResponce)(nil), "pb.AddNewWordResponce")
	proto.RegisterType((*GetByIDRequest)(nil), "pb.GetByIDRequest")
	proto.RegisterType((*GetByIDResponce)(nil), "pb.GetByIDResponce")
	proto.RegisterType((*Word)(nil), "pb.Word")
}

func init() { proto.RegisterFile("dictionary.proto", fileDescriptor_c04a5ffd1d26433d) }

var fileDescriptor_c04a5ffd1d26433d = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xc9, 0x4c, 0x2e,
	0xc9, 0xcc, 0xcf, 0x4b, 0x2c, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48,
	0x52, 0x32, 0xe4, 0x12, 0x74, 0x4c, 0x49, 0xf1, 0x4b, 0x2d, 0x0f, 0xcf, 0x2f, 0x4a, 0x09, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe1, 0x62, 0x29, 0xcf, 0x2f, 0x4a, 0x91, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x36, 0xe2, 0xd0, 0x2b, 0x48, 0xd2, 0x03, 0x4b, 0x83, 0x45, 0x95, 0x54, 0xb8,
	0x84, 0x90, 0xb5, 0x14, 0x17, 0xe4, 0xe7, 0x25, 0xa7, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0x42, 0x74,
	0x70, 0x06, 0x31, 0x65, 0xa6, 0x28, 0x29, 0x70, 0xf1, 0xb9, 0xa7, 0x96, 0x38, 0x55, 0x7a, 0xba,
	0xc0, 0x4c, 0x45, 0x57, 0xa1, 0xcf, 0xc5, 0x0f, 0x57, 0x01, 0x35, 0x04, 0xbf, 0xc5, 0x31, 0x5c,
	0x2c, 0x20, 0x9e, 0x90, 0x10, 0x92, 0x2a, 0x4e, 0x88, 0x9c, 0x90, 0x14, 0x17, 0x47, 0x6a, 0x45,
	0x62, 0x6e, 0x41, 0x4e, 0x6a, 0xb1, 0x04, 0x93, 0x02, 0xb3, 0x06, 0x67, 0x10, 0x9c, 0x2f, 0xa4,
	0xc2, 0xc5, 0x1b, 0x52, 0x94, 0x98, 0x57, 0x9c, 0x5c, 0x94, 0x59, 0x00, 0x0a, 0x01, 0x09, 0x66,
	0xb0, 0x46, 0x54, 0x41, 0xa3, 0x46, 0x46, 0x2e, 0x2e, 0x17, 0x78, 0x10, 0x09, 0xd9, 0x72, 0x71,
	0x21, 0x7c, 0x29, 0x24, 0x0a, 0x72, 0x0a, 0x46, 0x40, 0x49, 0x89, 0xa1, 0x0b, 0x43, 0xfc, 0xa1,
	0xc4, 0x20, 0x64, 0xc2, 0xc5, 0x0e, 0xf5, 0x9c, 0x90, 0x10, 0x48, 0x11, 0x6a, 0x58, 0x48, 0x09,
	0xa3, 0x88, 0xc1, 0x74, 0x25, 0xb1, 0x81, 0x23, 0xc6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xf2,
	0x6e, 0x79, 0xa5, 0xac, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DictionaryClient is the client API for Dictionary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DictionaryClient interface {
	AddNewWord(ctx context.Context, in *AddNewWordRequest, opts ...grpc.CallOption) (*AddNewWordResponce, error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponce, error)
}

type dictionaryClient struct {
	cc *grpc.ClientConn
}

func NewDictionaryClient(cc *grpc.ClientConn) DictionaryClient {
	return &dictionaryClient{cc}
}

func (c *dictionaryClient) AddNewWord(ctx context.Context, in *AddNewWordRequest, opts ...grpc.CallOption) (*AddNewWordResponce, error) {
	out := new(AddNewWordResponce)
	err := c.cc.Invoke(ctx, "/pb.Dictionary/AddNewWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponce, error) {
	out := new(GetByIDResponce)
	err := c.cc.Invoke(ctx, "/pb.Dictionary/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionaryServer is the server API for Dictionary service.
type DictionaryServer interface {
	AddNewWord(context.Context, *AddNewWordRequest) (*AddNewWordResponce, error)
	GetByID(context.Context, *GetByIDRequest) (*GetByIDResponce, error)
}

func RegisterDictionaryServer(s *grpc.Server, srv DictionaryServer) {
	s.RegisterService(&_Dictionary_serviceDesc, srv)
}

func _Dictionary_AddNewWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).AddNewWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Dictionary/AddNewWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).AddNewWord(ctx, req.(*AddNewWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Dictionary/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dictionary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Dictionary",
	HandlerType: (*DictionaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewWord",
			Handler:    _Dictionary_AddNewWord_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Dictionary_GetByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dictionary.proto",
}
